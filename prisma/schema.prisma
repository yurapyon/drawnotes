
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  createInputTypes = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// App ===

model Note {
  id               String @id @default(uuid())
  title            String @default("")
  text             String @default("")

  user             User   @relation(fields: [userId], references: [id])
  userId           String

  tags             Tag[]
}

model Tag {
  id     String  @id @default(uuid())
  name   String  @default("")
  color  String?

  user   User    @relation(fields: [userId], references: [id])
  userId String

  notes  Note[]
}

model Image {
  id     String @id @default(uuid())
  url    String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Auth ===

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  notes         Note[]
  tags          Tag[]
  images        Image[]

  // Settings
  lastEditedNote String?
  useVimMode     Boolean  @default(true)

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
